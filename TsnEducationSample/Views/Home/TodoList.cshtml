@model List<TsnEducation2024.Models.TodoItem>
@{
    ViewBag.Title = "サンプル";
}
<main aria-labelledby="title">
    <div class="row">
        <div class="d-flex flex-row justify-content-between mb-3">
        <h3>MyTodo</h3>
        @Html.ActionLink("サンプル一覧画面へ戻る", "Sample", "Home", new { area = "" }, new { @class = "dashboard-link" })
        </div>
        <form>
            <div class="d-flex flex-row gap-2" >
                <input class="form-control" type="text" id="todoTitle" placeholder="タイトルを入力" />
                <button class="btn btn-primary " type="button" id="todoSubmit">TODO追加</button>
            </div>
        </form>
        <div id="todoListTable">
            <form action="SaveTodoItems" method="post">
                <div style="display:flex; flex-direction:row; justify-content:space-between;">
                    <h4>TODOリスト一覧</h4>
                    <button class=" btn btn-primary mb-2" type="submit" id="saveTodo">保存</button>
                </div>
                <table class="table table-bordered" id="todoTable">
                    <thead>
                        <tr>
                            <th scope="col"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">操作</font></font></th>
                            <th scope="col"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">タイトル</font></font></th>
                            <th scope="col"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">説明</font></font></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @{string style = string.Empty;
                                //TODOアイテムを保存している場合はデフォルト行を非表示
                                if (Model.Any())
                                {
                                    style = "display:none;";
                                }
                                <td colspan="3" id="defaultFirstRow" style="text-align: center; @style">表示する項目がありません。</td>
                            }
                        </tr>
                        <!--データ表示-->
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-center">
                                    <button class="btn btn-outline-danger" type="button" id="deleteTodoItem">削除</button>
                                </td>
                                <td>
                                    <span class="todoContents">@item.Title</span>
                                </td>
                                <td>
                                    <span class="todoContents">@item.Description</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </form>
        </div>
    </div>
</main>
@section scripts{
    <script type="text/javascript">

        //#region TODOリストの処理

        // 追加ボタンを作成
        function addTasks(task) {
            //デフォルト行を取得
            var defaultFirstRow = $('#defaultFirstRow');
            //デフォルト表示を非表示にする
            defaultFirstRow.hide();
            // tbody要素を取得
            var todoTableBody = $('#todoTable tbody')[0];
            // tbody要素に最下行を追加
            var trElem = todoTableBody.insertRow(-1);
            // td要素(セル要素)を追加
            var btnCellElem = trElem.insertCell(0);
            var titleCellElem = trElem.insertCell(1);
            var descriptionCellElem = trElem.insertCell(2);
            //削除ボタンの列
            var deleteBtn = document.createElement('button');
            deleteBtn.id = "deleteTodoItem";
            deleteBtn.className = "btn btn-outline-danger";
            deleteBtn.type = "button";
            deleteBtn.innerHTML = "削除";
            btnCellElem.appendChild(deleteBtn);
            btnCellElem.classList.add("text-center");
            //タイトル列
            var titleCell = document.createElement('span');
            titleCell.className = "todoContents";
            titleCell.innerHTML = task;
            titleCellElem.appendChild(titleCell);
            //説明列
            var descriptionCell = titleCell.cloneNode(false);
            descriptionCell.innerHTML = task + "の説明です。";
            descriptionCellElem.appendChild(descriptionCell);
        };

        // 削除ボタンにタスクを消す機能を付与
        function deleteTasks(deleteBtn, todoTableBody, defaultFirstRow) {
            //デフォルト行を取得
            var defaultFirstRow = $('#defaultFirstRow');
            // tbody要素を取得
            var todoTableBody = $('#todoTable tbody')[0];

            var deleteRow = deleteBtn.closest('tr');
            deleteRow.remove();
            //TODOをすべて消した場合はデフォルト行を表示
            if (todoTableBody.rows.length == 1) {
                defaultFirstRow.show();
            }
        };

        //削除ボタンのクリックイベント設定
        $(document).on('click', '#deleteTodoItem', function (e) {
            e.preventDefault();
            deleteTasks(this);
        });

        //TODO追加ボタン押下処理
        $('#todoSubmit').click(function (e) {
            //post処理防止
            e.preventDefault();
            //TODO追加処理
            addTasks($('#todoTitle').val());
            //入力テキストを空にする
            $('#todoTitle').val('');
        });


        //保存ボタンクリック処理
        $('#saveTodo').click(function (e) {
            // tbodyのtr要素(TODOアイテム行)を取得
            var todoItems = $('#todoTable tbody tr');
            //行がない場合は終了
            if (todoItems === null) {
                return false;
            }
            var postItemIndex = 0;
            //行ごとのデータをPOSTメソッドで送れるように加工する
            for (let i = 0; i < todoItems.length; i++) {
                var todoValues = $(todoItems[i]).children("td");
                //td要素(セル)が一つしかない行はデフォルト行なので、処理しない
                if (todoValues.length === 1) {
                    continue;
                }
                //タイトルのデータを作成
                var postTitle = $('<input>').attr({
                    type: 'hidden',
                    name: `todoItems[${postItemIndex}].Title`,
                    value: $(todoValues[1]).find('span')[0].innerHTML
                });
                //説明のデータを作成
                var postDescription = $('<input>').attr({
                    type: 'hidden',
                    name: `todoItems[${postItemIndex}].Description`,
                    value: $(todoValues[2]).find('span')[0].innerHTML
                });

                //データを追加する
                todoItems[i].append(postTitle[0]);
                todoItems[i].append(postDescription[0]);
                postItemIndex++;
            }


        });
        //#endregion

    </script>

    <style>
        .dashboard-link {
            text-decoration: underline;
            padding-left: calc(var(--bs-gutter-x)* 0.5);
            font-size: 1.5rem;
            width: auto;
        }

        .task_submit {
            height: 2rem;
        }

        #todoListTable {
            width: 100%;
            height: 400px;
            border-radius: 1rem;
            margin-top: 2rem;
        }

        .table-bordered th:first-child {
            width: 10%;
            min-width: 80px;
        }

        .table-bordered td:first-child {
            width: 10%;
            min-width: 80px;
        }

        .todoContents {
            vertical-align: inherit;
        }


        /* クリック時に色を濃くする */
        input:active {
            background: #5a5a5a;
        }
    </style>
}
